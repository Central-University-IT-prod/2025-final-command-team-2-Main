version: '3.8'

services:
  db:
    image: postgres:16-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./src/backend
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-postgres}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - HOST=0.0.0.0
      - PORT=5000
      - SERVER_PORT=5000
      - BOT_TOKEN=${BOT_TOKEN}
      - FLASK_APP=run.py
      - WEBAPP_URL=https://prod-team-2-b2gtedt8.REDACTED
      - TMDB_API_TOKEN=${TMDB_API_TOKEN}
      - CHATGPT_SECRET_KEY=${CHATGPT_SECRET_KEY}
    expose:
      - "5000"
    restart: unless-stopped
    dns:
      - REDACTED
    extra_hosts:
      - "themoviedb.org:REDACTED"
      - "tmdb.org:REDACTED"

  frontend:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile
    expose:
      - "80"
    depends_on:
      - backend
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

volumes:
  postgres_data: